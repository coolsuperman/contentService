// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: content.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentManagerClient is the client API for ContentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentManagerClient interface {
	//content operation
	GetContentLit(ctx context.Context, in *GetContentListReq, opts ...grpc.CallOption) (*GetContentListResp, error)
	OperateContent(ctx context.Context, in *OperateContentReq, opts ...grpc.CallOption) (*OperateContentResp, error)
	GetContentDetail(ctx context.Context, in *GetContentDetailReq, opts ...grpc.CallOption) (*GetContentDetailResp, error)
	AddContent(ctx context.Context, in *AddContentReq, opts ...grpc.CallOption) (*AddContentResp, error)
}

type contentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewContentManagerClient(cc grpc.ClientConnInterface) ContentManagerClient {
	return &contentManagerClient{cc}
}

func (c *contentManagerClient) GetContentLit(ctx context.Context, in *GetContentListReq, opts ...grpc.CallOption) (*GetContentListResp, error) {
	out := new(GetContentListResp)
	err := c.cc.Invoke(ctx, "/content.ContentManager/GetContentLit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerClient) OperateContent(ctx context.Context, in *OperateContentReq, opts ...grpc.CallOption) (*OperateContentResp, error) {
	out := new(OperateContentResp)
	err := c.cc.Invoke(ctx, "/content.ContentManager/OperateContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerClient) GetContentDetail(ctx context.Context, in *GetContentDetailReq, opts ...grpc.CallOption) (*GetContentDetailResp, error) {
	out := new(GetContentDetailResp)
	err := c.cc.Invoke(ctx, "/content.ContentManager/GetContentDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerClient) AddContent(ctx context.Context, in *AddContentReq, opts ...grpc.CallOption) (*AddContentResp, error) {
	out := new(AddContentResp)
	err := c.cc.Invoke(ctx, "/content.ContentManager/AddContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentManagerServer is the server API for ContentManager service.
// All implementations must embed UnimplementedContentManagerServer
// for forward compatibility
type ContentManagerServer interface {
	//content operation
	GetContentLit(context.Context, *GetContentListReq) (*GetContentListResp, error)
	OperateContent(context.Context, *OperateContentReq) (*OperateContentResp, error)
	GetContentDetail(context.Context, *GetContentDetailReq) (*GetContentDetailResp, error)
	AddContent(context.Context, *AddContentReq) (*AddContentResp, error)
	mustEmbedUnimplementedContentManagerServer()
}

// UnimplementedContentManagerServer must be embedded to have forward compatible implementations.
type UnimplementedContentManagerServer struct {
}

func (UnimplementedContentManagerServer) GetContentLit(context.Context, *GetContentListReq) (*GetContentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentLit not implemented")
}
func (UnimplementedContentManagerServer) OperateContent(context.Context, *OperateContentReq) (*OperateContentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateContent not implemented")
}
func (UnimplementedContentManagerServer) GetContentDetail(context.Context, *GetContentDetailReq) (*GetContentDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentDetail not implemented")
}
func (UnimplementedContentManagerServer) AddContent(context.Context, *AddContentReq) (*AddContentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContent not implemented")
}
func (UnimplementedContentManagerServer) mustEmbedUnimplementedContentManagerServer() {}

// UnsafeContentManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentManagerServer will
// result in compilation errors.
type UnsafeContentManagerServer interface {
	mustEmbedUnimplementedContentManagerServer()
}

func RegisterContentManagerServer(s grpc.ServiceRegistrar, srv ContentManagerServer) {
	s.RegisterService(&ContentManager_ServiceDesc, srv)
}

func _ContentManager_GetContentLit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServer).GetContentLit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentManager/GetContentLit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServer).GetContentLit(ctx, req.(*GetContentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManager_OperateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServer).OperateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentManager/OperateContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServer).OperateContent(ctx, req.(*OperateContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManager_GetContentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServer).GetContentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentManager/GetContentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServer).GetContentDetail(ctx, req.(*GetContentDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManager_AddContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServer).AddContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentManager/AddContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServer).AddContent(ctx, req.(*AddContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentManager_ServiceDesc is the grpc.ServiceDesc for ContentManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.ContentManager",
	HandlerType: (*ContentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContentLit",
			Handler:    _ContentManager_GetContentLit_Handler,
		},
		{
			MethodName: "OperateContent",
			Handler:    _ContentManager_OperateContent_Handler,
		},
		{
			MethodName: "GetContentDetail",
			Handler:    _ContentManager_GetContentDetail_Handler,
		},
		{
			MethodName: "AddContent",
			Handler:    _ContentManager_AddContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}
